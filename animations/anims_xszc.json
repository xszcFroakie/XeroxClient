{
  "format_version": "1.8.0",
  "animations": {
    "animation.player.cape": {
      "loop": true,
      "bones": {
        "cape": {
          "rotation": [
            "math.clamp(math.lerp(0, -110, q.cape_flap_amount) - (13 * q.modified_move_speed), -70, 0)",
            "q.modified_move_speed * math.pow(math.sin(q.body_y_rotation - q.head_y_rotation(0)), 3) * 55",
            0
          ],
          "position": [
            0,
            0,
            "q.get_root_locator_offset('armor_offset.default_neck', 1)"
          ]
        },
        "part1": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * (math.cos(q.modified_distance_moved * 18) * 16)",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 7"
          ]
        },
        "part2": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(22 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 7"
          ],
          "scale": 1
        },
        "part3": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(50 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 7"
          ]
        },
        "part4": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(76 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 7"
          ]
        },
        "part5": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(100 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 6.5"
          ]
        },
        "part6": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(122 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 6"
          ]
        },
        "part7": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(142 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 5.5"
          ]
        },
        "part8": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(160 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 5"
          ]
        },
        "part9": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(176 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 4.5"
          ]
        },
        "part10": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(190 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 4"
          ]
        },
        "part11": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(202 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 3.75"
          ]
        },
        "part12": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(212 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 3.5"
          ]
        },
        "part13": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(220 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 3.25"
          ]
        },
        "part14": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(226 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 3"
          ]
        },
        "part15": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(230 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 2.75"
          ]
        },
        "part16": {
          "rotation": [
            "math.clamp(q.cape_flap_amount, 0, 0.5) * math.cos(232 - q.modified_distance_moved * 18) * 13",
            0,
            "q.modified_move_speed * math.sin(q.body_y_rotation - q.head_y_rotation(0)) * 2.5"
          ]
        }
      }
    }
  }
}
